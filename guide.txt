Plantasia is a basic computational language based on planting variables into the garden (a stack)

SYNTAX AND VOCABULARY
seed:
    creates variable
    ex:
        seed rose 3
	    seed daisy

plant:
    pushes plant or value into garden
    ex:
        plant rose
	    plant 3

propagate:
    extends the top of the garden by creating a copy of it
	you can also modify the copy with +,-,*,/,% and a variable
    ex:
        propagate
        or
        propagate * rose

dig:
    pops plant from garden
    into (plant name) puts the popped value into the plant
    ex:
        dig into rose
        or
        dig

examine: (plant name)
    prints a plants value
    if given the word “garden” it peeks at the plant at the top of the garden
    if you want to print as a character, use @ before the value
    ex:
        examine rose
        examine garden
        examine @ rose

absorb:
    takes an input from argv, and plants it.
    integers are stored as integers and characters as their ASCII value.
    ex:
        on: ./plantasia source.pa 2 
        absorb
        examine garden
        get: 2
        on: ./plantasia source.pa b
        absorb
        examine garden
        would yeild
        get: 98

wither: (plant name)
    decrements plant until 0 and executes block untill end statement each iteration
    if the plant is 0 the block doesnt executes
    ex:
        wither rose
            examine rose
        end

gardener: gardeners follow a set of instructions to work on the garden
	the gardeners perform their instructions everytime their name is called
	ex:
	gardener look
	    examine garden
	finish
	note: gardeners can be recursive but given all stackframes share the same garden only tail recursion works

EXAMPLES

// prints n first fibinocci sequence numbers
seed n 6
seed f0 0
seed f1 1
seed temp 0
plant f0
plant f1
wither n
    dig into f1
    dig into f0
    examine f0
    plant f1
    propagate + f0
end

// nested for loop
seed i 3
plant i
seed j 3
wither j
    propagate
    dig into i
    wither i
        examine i
    end
end

// gardener that cubes the top of the stack
gardener cube
    seed n
    dig into n
    plant n
    propagate
    seed i 3
    wither i
        propagate * n
    end
    dig
    examine garden
finish

plant 3
cube
examine garden

// tail recursive gardener for factorial of n

gardener frank
    // n
    propagate
    // i (i is a copyofn < 0??)
    propagate < 1
    dig into i
    dig into n
    dig
    // r (r is the result 2nd input)
    propagate
    dig into r
    plant n
    // the wither statement is goofin it by decrementing 0
    wither i
        plant r
        finish
    dead
        // calculate new r = n * r
        propagate * r
        dig into r
        // calculate new n = n - 1
        propagate - 1
        dig into n
        plant r
        plant n
        frank
        finish
    end
finish

seed n 4
seed r 1
seed i
plant r
plant n
frank
examine garden


