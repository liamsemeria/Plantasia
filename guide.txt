Plantasia is a basic computational language based on planting variables into the garden (a stack)

GENERAL ADVICE
the variables in PLantasia are integers, and the only way to interact with them is using the garden.
everything in the stack frame shares one garden, so tail recursion is the way to go if you feel in the recursive mood


SYNTAX AND VOCABULARY
seed:
    creates a plant variable (int)
    ex:
        seed rose 3
	seed daisy

plant:
    pushes plant or value into garden (stack)
    ex:
        plant rose
	plant 3

propagate:
    extends the top of the garden by creating a copy of it
	you can also modify the copy with +,-,*,/,% and a variable
    ex:
        propagate
        or
        propagate * rose

dig:
    pops plant from garden
    into (plant name) puts the popped value into the plant
    ex:
        dig into rose
        or
        dig

examine: (plant name)
    prints a plants value
    if given the word “garden” it prints the plant at the top of the garden
    ex:
        examine rose

wither: (plant name)
    decrements plant until 0 and executes block untill end statement each iteration
    if the plant is 0 the block doesnt execute
    ex:
        wither rose
            examine rose
        end
dead:
    within a wither statement, the section under dead will only execute when the plant being withered is zero
    in practice, you can use wither and dead as an if else statement (be mindfull of decrement)
    ex:
    	wither b
	   examine t
	dead
	   examine f
	end
   (if b is 2 we get t and if b is 1 we get f)

gardener: gardeners follow a set of instructions to work on the garden
    the gardeners perform their instructions everytime their name is called
    ex:
        gardener look
    	    examine garden
	finish
    note: again, gardeners can be recursive but given all stackframes share the same garden only tail recursion works

EXAMPLES

// prints n first fibinocci sequence numbers
seed n 6
seed f0 0
seed f1 1
seed temp 0
plant f0
plant f1
wither n
    dig into f1
    dig into f0
    examine f0
    plant f1
    propagate + f0
end

// nested for loop
seed i 3
plant i
seed j 3
wither j
    propagate
    dig into i
    wither i
        examine i
    end
end

// gardener that cubes the top of the stack
gardener cube
    seed n
    dig into n
    plant n
    propagate
    seed i 3
    wither i
        propagate * n
    end
    dig
    examine garden
finish

plant 3
cube
examine garden

// tail recursive gardener for factorial of n

gardener frank
    // n
    propagate
    // i (i is a copyofn < 0??)
    propagate < 1
    dig into i
    dig into n
    dig
    // r (r is the result 2nd input)
    propagate
    dig into r
    plant n
    // the wither statement is goofin it by decrementing 0
    wither i
        plant r
        finish
    dead
        // calculate new r = n * r
        propagate * r
        dig into r
        // calculate new n = n - 1
        propagate - 1
        dig into n
        plant r
        plant n
        frank
        finish
    end
finish

seed n 4
seed r 1
seed i
plant r
plant n
frank
examine garden


